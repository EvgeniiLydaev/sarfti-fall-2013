Источники:

http://git-scm.com/book/ru
http://habrahabr.ru/post/106912/
http://crazycode.net/blog/5-versioning/8-git-main-commands



Главные ветви:

Центральный репозиторий содержит две главные ветки, существующие всё время.
1)master
2)develop

Ветвь master создаётся при инициализации репозитория, что должно быть знакомо каждому пользователю Git. 
Параллельно ей также мы создаём ветку для разработки под названием develop.



Вспомогательные ветви:

Помимо главных ветвей master и develop, наша модель разработки содержит некоторое количество типов вспомогательных ветвей, 
которые используются для распараллеливания разработки между членами команды, для упрощения внедрения нового функционала (features), 
для подготовки релизов и для быстрого исправления проблем в производственной версии приложения. В отличие от главный ветвей, 
эти ветви всегда имеют ограниченный срок жизни. Каждая из них в конечном итоге рано или поздно удаляется.

Мы используем следующие типы ветвей:
Ветви функциональностей (Feature branches)
Ветви релизов (Release branches)
Ветви исправлений (Hotfix branches)

У каждого типа ветвей есть своё специфическое назначение и строгий набор правил, от каких ветвей они могут порождаться, и в какие должны вливаться. 
Сейчас мы рассмотрим их по очереди.
Конечно же, с технической точки зрения, у этих ветвей нет ничего «специфического». 
Разбиение ветвей на категории существует только с точки зрения того, как они используются. А во всём остальном это старые добрые ветви

Слияние веток:
Слияние веток, в отличие от обычной практики централизованных систем, в git
происходит практически каждый день. Естественно, что имеется удобный интерфейс к
популярной операции:

git merge new-feature — попробует объединить текующую ветку и ветку new-feature.






Работа с ветками:  

-Отобразить список веток проекта:
 git branch
-Отобразить список веток с последними коммитами:
 git branch -v
-Создать новую ветку с названием "iss53":
 git branch iss53
-Переключиться на ветку iss53:
 git checkout iss53
-Создать ветку с названием "iss53" и переключиться на нее:
 git checkout -b iss53
-Создать ветку с названием "articles" на основе ветки "articles" из удаленного сервера pb и переключиться на нее:
git checkout -b articles pb/articles
-Слить текущую ветку с веткой hotfix:
 git merge hotfix
-Переименовать ветку "articles" в "content":
 git branch -m articles content
-Удалить ветку hotfix:
 git branch -d hotfix
-Удалить ветку hotfix на удаленном сервере pb:
 git push pb :hotfix
-Запустить графический инструмент для отображения конфликтных ситуаций:
 git mergetool
-Посмотреть список веток, которые уже слиты с текущей:
 git branch --merged
-Посмотреть список веток, которые содержат наработки, но еще не слиты с текущей:
 git branch --no-merged
